use Test;
use NJK::AST;
use NJK::Grammar;
use NJK::Actions;
use NJK::AST::Unit;
use NJK::AST::HTMLText;
use NJK::AST::HTMLTagVoid;
use NJK::AST::HTMLTagBody;
use NJK::AST::Value;
use NJK::AST::LogicNumeric;
use NJK::AST::LogicQuoted;
use NJK::AST::LogicInfixOp;
use NJK::AST::If;
use NJK::AST::For;
use NJK::AST::Block;
use NJK::AST::Filter;
use X::NJK::ParsingError;

my @tests = [
  Q||                          => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new),
  Q|bla|                       => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::HTMLText.new(value => "bla")])),
  Q|<br>|                      => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::HTMLTagVoid.new(tag-name => "br")])),
  Q|<img src='bla'>|           => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::HTMLTagVoid.new(tag-name => "img", params => %( :src<bla> ))])),
  Q|<img src='bla' alt='ble'>| => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::HTMLTagVoid.new(tag-name => "img", params => %( :src<bla>, :alt<ble> ))])),
  Q|<a>bla</a>|                => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::HTMLTagBody.new(tag-name => "a",   body => [NJK::AST::HTMLText.new(value => "bla")])])),
  Q|<a href='bla'>ble</a>|     => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::HTMLTagBody.new(tag-name => "a",   params => %( :href<bla> ), body => [NJK::AST::HTMLText.new(value => "ble")] )] )),
  Q|{{ 1 }}|                   => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::Value.new(value => NJK::AST::LogicNumeric.new(value => 1))])),
  Q<{{ 1 | filter }}>          => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::Value.new(value => NJK::AST::LogicNumeric.new(value => 1), filters => [NJK::AST::Filter.new(name => "filter", params => Array[NJK::AST::Logic].new())])])),
  Q<{{ 1 | f1 | f2(1,"a") }}>  => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::Value.new(value => NJK::AST::LogicNumeric.new(value => 1), filters => [NJK::AST::Filter.new(name => "f1", params => Array[NJK::AST::Logic].new()), NJK::AST::Filter.new(name => "f2", params => [NJK::AST::LogicNumeric.new(value => 1), NJK::AST::LogicQuoted.new: value => "a", :double])])])),
  Q|{{ 'a' }}|                 => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::Value.new(value => NJK::AST::LogicQuoted.new(value => "a"))])),
  Q|{{ "a" }}|                 => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::Value.new(value => NJK::AST::LogicQuoted.new(value => "a", :double))])),
  Q|{{ 1 + 2 }}|               => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::Value.new(value => NJK::AST::LogicInfixOp.new(left => NJK::AST::LogicNumeric.new(value => 1), right => NJK::AST::LogicNumeric.new(value => 2), :op<+>))])),
  Q|{{ 1 - 2 }}|               => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::Value.new(value => NJK::AST::LogicInfixOp.new(left => NJK::AST::LogicNumeric.new(value => 1), right => NJK::AST::LogicNumeric.new(value => 2), :op<->))])),
  Q|{{ 1 * 2 }}|               => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::Value.new(value => NJK::AST::LogicInfixOp.new(left => NJK::AST::LogicNumeric.new(value => 1), right => NJK::AST::LogicNumeric.new(value => 2), :op<*>))])),
  Q|{{ 1 / 2 }}|               => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::Value.new(value => NJK::AST::LogicInfixOp.new(left => NJK::AST::LogicNumeric.new(value => 1), right => NJK::AST::LogicNumeric.new(value => 2), :op</>))])),
  Q|{{ 1 * 2 + 3 - 4 / 5 }}|   => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::Value.new(value => NJK::AST::LogicInfixOp.new(left => NJK::AST::LogicNumeric.new(value => 1), right => NJK::AST::LogicInfixOp.new(left => NJK::AST::LogicNumeric.new(value => 2), right => NJK::AST::LogicInfixOp.new(left => NJK::AST::LogicNumeric.new(value => 3), right => NJK::AST::LogicInfixOp.new(left => NJK::AST::LogicNumeric.new(value => 4), right => NJK::AST::LogicNumeric.new(value => 5), op => "/"), op => "-"), op => "+"), op => "*"))])),

  Q|{% if 1 %}bla{% endif %}|                              => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::If.new(condition => NJK::AST::LogicNumeric.new(value => 1), block => NJK::AST::StatementBlock.new(parts => [NJK::AST::HTMLText.new: value => "bla"]))])),
  Q|{% if 1 %}bla{% else %}ble{% endif %}|                 => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::If.new(condition => NJK::AST::LogicNumeric.new(value => 1), block => NJK::AST::StatementBlock.new(parts => [NJK::AST::HTMLText.new: value => "bla"]), else => NJK::AST::StatementBlock.new(parts => [NJK::AST::HTMLText.new(value => "ble")]))])),
  Q|{% if 1 %}bla{% elif 2 %}ble{% else %}bli{% endif %}|  => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::If.new(condition => NJK::AST::LogicNumeric.new(value => 1), block => NJK::AST::StatementBlock.new(parts => [NJK::AST::HTMLText.new: value => "bla"]), elif => [NJK::AST::LogicNumeric.new(value => 2) => NJK::AST::StatementBlock.new(parts => [NJK::AST::HTMLText.new(value => "ble")])], else => NJK::AST::StatementBlock.new(parts => [NJK::AST::HTMLText.new: value => "bli"]))])),

  Q|{% set items = [] %}{% for i in items %}bla{% endfor %}|              => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::Set.new(variable => NJK::AST::DeclareVar.new(name => "items"), value => NJK::AST::LogicArray.new(values => [])), NJK::AST::For.new(iterating => [NJK::AST::DeclareVar.new(name => "i")], iterator => NJK::AST::UseVariable.new(name => "items"), block => NJK::AST::StatementBlock.new(parts => [NJK::AST::HTMLText.new(value => "bla")]))], variables => { items => True })),
  Q|{% set items = [] %}{% for i in items %}bla{% else %}ble{% endfor %}| => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new(parts => [NJK::AST::Set.new(variable => NJK::AST::DeclareVar.new(name => "items"), value => NJK::AST::LogicArray.new(values => [])), NJK::AST::For.new(iterating => [NJK::AST::DeclareVar.new(name => "i")], iterator => NJK::AST::UseVariable.new(name => "items"), block => NJK::AST::StatementBlock.new(parts => [NJK::AST::HTMLText.new(value => "bla")]), else => NJK::AST::StatementBlock.new(parts => [NJK::AST::HTMLText.new(value => "ble")]))], variables => { items => True })),

  Q|{% block test %}bla{% endblock %}| => NJK::AST::Unit.new(
    block => NJK::AST::StatementBlock.new(
      parts => [
        NJK::AST::Block.new(
          name => "test",
          block => [
            NJK::AST::HTMLText.new(value => "bla"),
          ],
        ),
      ],
      blocks => %(
        test => NJK::AST::Block.new(
          name => "test",
          block => [
            NJK::AST::HTMLText.new(value => "bla"),
          ],
        ),
      ),
    ),
  ),

  Q|{{ super() }}|         => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new: parts => [NJK::AST::Value.new: value => NJK::AST::LogicFuncCall.new: name => "super"]),
  Q|{{ func(1, 2, "c") }}| => NJK::AST::Unit.new(block => NJK::AST::StatementBlock.new: parts => [NJK::AST::Value.new: value => NJK::AST::LogicFuncCall.new: name => "func", params => [NJK::AST::LogicNumeric.new(value => 1), NJK::AST::LogicNumeric.new(value => 2), NJK::AST::LogicQuoted.new(value => "c", :double)]]),
];

for @tests -> (:$key, :$value) {
  diag $key;
  my $match;
  lives-ok { $match = NJK::Grammar.parse: :actions(NJK::Actions), $key }, "lives: $key";
  isa-ok $match, Match;
  isa-ok $match.ast, NJK::AST::Unit;
  is-deeply $match.ast, $value, $key
}

my @errors = [
  Q|{{ bla }}|                        => \(X::NJK::ParsingError, message => /"Variable not defined"/),
  Q|{% for i in items %}{% endfor %}| => \(X::NJK::ParsingError, message => /"Variable not defined"/),
];

for @errors -> (:$key, :$value) {
  throws-like { NJK::Grammar.parse: :actions(NJK::Actions), $key }, |$value
}

done-testing;
